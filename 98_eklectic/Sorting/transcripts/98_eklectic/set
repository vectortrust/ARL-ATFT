#!/bin/bash

# OpenWrt Unbound DNS-over-TLS Setup Script
# Configures unbound with Cloudflare DNS-over-TLS, DNSSEC, and proper caching

set -e

echo "=== OpenWrt Unbound DNS-over-TLS Setup ==="
echo "This script will:"
echo "- Install unbound DNS resolver"
echo "- Configure DNS-over-TLS with Cloudflare"
echo "- Enable DNSSEC validation"
echo "- Disable dnsmasq DNS (keeping DHCP)"
echo "- Configure proper caching and privacy settings"
echo

# Get network configuration
echo "Please enter your local network (default: 10.3.1.0/24):"
read -r LOCAL_NETWORK
LOCAL_NETWORK=${LOCAL_NETWORK:-"10.3.1.0/24"}

echo "Do you want to install and configure Kea DHCP server (ISC's modern DHCP)? [y/N]:"
read -r INSTALL_DHCP
INSTALL_DHCP=${INSTALL_DHCP:-"n"}

echo "Do you want to use Cloudflare DNS (1.1.1.1) or custom DNS servers? [cloudflare/custom]:"
read -r DNS_CHOICE
DNS_CHOICE=${DNS_CHOICE:-"cloudflare"}

if [ "$DNS_CHOICE" = "custom" ]; then
    echo "Enter primary DNS server IP:"
    read -r DNS1
    echo "Enter secondary DNS server IP:"
    read -r DNS2
    echo "Enter DNS server hostname for TLS verification:"
    read -r DNS_HOSTNAME
else
    DNS1="1.1.1.1"
    DNS2="1.0.0.1"
    DNS_HOSTNAME="cloudflare-dns.com"
fi

echo
echo "Configuration summary:"
echo "- Local network: $LOCAL_NETWORK"
echo "- Primary DNS: $DNS1"
echo "- Secondary DNS: $DNS2"
echo "- TLS hostname: $DNS_HOSTNAME"
echo "- Install Kea DHCP server: $INSTALL_DHCP"
echo

echo "Proceed with installation? [y/N]:"
read -r CONFIRM
if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
    echo "Installation cancelled."
    exit 0
fi

echo
echo "=== Starting Installation ==="

# Update package list
echo "Updating package list..."
opkg update

# Install unbound
echo "Installing unbound packages..."
opkg install unbound-daemon unbound-control

# Install full DHCP server if requested
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    echo "Installing Kea DHCP server..."
    opkg install kea-dhcp4 kea-ctrl-agent
fi

# Create unbound configuration directory
mkdir -p /etc/unbound
mkdir -p /var/lib/unbound

# Download root hints
echo "Downloading root hints..."
wget -O /etc/unbound/root.hints https://www.internic.net/domain/named.cache || {
    echo "Failed to download root hints. Creating minimal version..."
    cat > /etc/unbound/root.hints << 'EOF'
;       This file holds the information on root name servers needed to
;       initialize cache of Internet domain name servers
;       (e.g. reference this file in the "cache  .  <file>"
;       configuration file of BIND domain name servers).
;
.                        3600000      NS    A.ROOT-SERVERS.NET.
A.ROOT-SERVERS.NET.      3600000      A     198.41.0.4
A.ROOT-SERVERS.NET.      3600000      AAAA  2001:503:ba3e::2:30
.                        3600000      NS    B.ROOT-SERVERS.NET.
B.ROOT-SERVERS.NET.      3600000      A     199.9.14.201
B.ROOT-SERVERS.NET.      3600000      AAAA  2001:500:200::b
EOF
}

# Create unbound configuration
echo "Creating unbound configuration..."
cat > /etc/unbound/unbound.conf << EOF
server:
    # Network interface settings
    interface: 0.0.0.0
    interface: ::0
    port: 53
    do-ip4: yes
    do-ip6: yes
    do-udp: yes
    do-tcp: yes
    
    # Access control
    access-control: $LOCAL_NETWORK allow
    access-control: 127.0.0.0/8 allow
    access-control: ::1/128 allow
    access-control: 0.0.0.0/0 refuse
    access-control: ::/0 refuse
    
    # Performance and threading
    num-threads: 2
    msg-cache-slabs: 2
    rrset-cache-slabs: 2
    infra-cache-slabs: 2
    key-cache-slabs: 2
    
    # Cache settings
    cache-min-ttl: 3600
    cache-max-ttl: 86400
    msg-cache-size: 4m
    rrset-cache-size: 8m
    
    # DNSSEC settings
    auto-trust-anchor-file: "/var/lib/unbound/root.key"
    val-clean-additional: yes
    val-permissive-mode: no
    val-log-level: 1
    
    # Privacy and security
    hide-identity: yes
    hide-version: yes
    harden-glue: yes
    harden-dnssec-stripped: yes
    harden-below-nxdomain: yes
    harden-referral-path: yes
    
    # Performance optimizations
    prefetch: yes
    prefetch-key: yes
    minimal-responses: yes
    serve-expired: yes
    
    # Use root hints for recursive resolution
    root-hints: "/etc/unbound/root.hints"
    
    # Logging
    verbosity: 1
    log-queries: no
    log-replies: no

# DNS-over-TLS forwarding to upstream servers
forward-zone:
    name: "."
    forward-tls-upstream: yes
    forward-addr: ${DNS1}@853#${DNS_HOSTNAME}
    forward-addr: ${DNS2}@853#${DNS_HOSTNAME}
EOF

# Add IPv6 DNS if using Cloudflare
if [ "$DNS_CHOICE" = "cloudflare" ]; then
    cat >> /etc/unbound/unbound.conf << 'EOF'
    forward-addr: 2606:4700:4700::1111@853#cloudflare-dns.com
    forward-addr: 2606:4700:4700::1001@853#cloudflare-dns.com
EOF
fi

# Initialize DNSSEC root key
echo "Initializing DNSSEC root key..."
unbound-anchor -a /var/lib/unbound/root.key || echo "Root key initialization may have failed, but continuing..."

# Configure dnsmasq to disable DNS but keep DHCP
echo "Configuring dnsmasq..."
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    # Disable dnsmasq entirely if using Kea DHCP
    /etc/init.d/dnsmasq stop
    /etc/init.d/dnsmasq disable
    
    # Configure Kea DHCP server
    NETWORK_PREFIX=$(echo $LOCAL_NETWORK | cut -d'/' -f1 | cut -d'.' -f1-3)
    DHCP_START="${NETWORK_PREFIX}.10"
    DHCP_END="${NETWORK_PREFIX}.100"
    ROUTER_IP="${NETWORK_PREFIX}.1"
    
    echo "Configuring Kea DHCP server..."
    mkdir -p /etc/kea
    
    cat > /etc/kea/kea-dhcp4.conf << EOF
{
    "Dhcp4": {
        "interfaces-config": {
            "interfaces": [ "br-lan" ],
            "dhcp-socket-type": "raw"
        },
        "control-socket": {
            "socket-type": "unix",
            "socket-name": "/var/run/kea4-ctrl-socket"
        },
        "lease-database": {
            "type": "memfile",
            "persist": true,
            "name": "/var/lib/kea/dhcp4.leases"
        },
        "valid-lifetime": 3600,
        "max-valid-lifetime": 7200,
        "renew-timer": 1800,
        "rebind-timer": 3000,
        "subnet4": [
            {
                "subnet": "$LOCAL_NETWORK",
                "pools": [
                    {
                        "pool": "$DHCP_START - $DHCP_END"
                    }
                ],
                "option-data": [
                    {
                        "name": "routers",
                        "data": "$ROUTER_IP"
                    },
                    {
                        "name": "domain-name-servers", 
                        "data": "$ROUTER_IP"
                    },
                    {
                        "name": "domain-name",
                        "data": "lan"
                    }
                ]
            }
        ],
        "loggers": [
            {
                "name": "kea-dhcp4",
                "output_options": [
                    {
                        "output": "syslog:local0"
                    }
                ],
                "severity": "INFO"
            }
        ]
    }
}
EOF
    
    # Create lease database directory
    mkdir -p /var/lib/kea
    touch /var/lib/kea/dhcp4.leases
    
    # Create init script for Kea if it doesn't exist
    if [ ! -f /etc/init.d/kea-dhcp4 ]; then
        cat > /etc/init.d/kea-dhcp4 << 'EOF'
#!/bin/sh /etc/rc.common

START=60
STOP=10

USE_PROCD=1
PROG=/usr/sbin/kea-dhcp4

start_service() {
    procd_open_instance
    procd_set_param command $PROG -c /etc/kea/kea-dhcp4.conf
    procd_set_param pidfile /var/run/kea-dhcp4.pid
    procd_set_param respawn
    procd_close_instance
}

stop_service() {
    killall kea-dhcp4
}
EOF
        chmod +x /etc/init.d/kea-dhcp4
    fi
    
    # Enable and start Kea DHCP
    /etc/init.d/kea-dhcp4 enable
    /etc/init.d/kea-dhcp4 start
else
    # Keep dnsmasq for DHCP but disable DNS
    uci set dhcp.@dnsmasq[0].port='0'
    uci delete dhcp.@dnsmasq[0].server 2>/dev/null || true
    # Force DNS server to router IP for DHCP clients
    uci set dhcp.lan.dhcp_option='6,127.0.0.1'
    uci commit dhcp
fi

# Configure system to use unbound
echo "Configuring system DNS..."
cat > /etc/resolv.conf << 'EOF'
nameserver 127.0.0.1
nameserver ::1
EOF

# Enable and start services
echo "Starting services..."
/etc/init.d/unbound enable
/etc/init.d/unbound start

# Wait for unbound to start
sleep 3

# Restart dnsmasq only if not using ISC DHCP
if [ "$INSTALL_DHCP" != "y" ] && [ "$INSTALL_DHCP" != "Y" ]; then
    /etc/init.d/dnsmasq restart
fi

# Configure firewall to block external DNS and force clients to use router DNS
echo "Configuring firewall to prevent DNS bypass..."

# Block outbound DNS on ports 53, 853 (DNS-over-TLS), and 443 (DNS-over-HTTPS)
# Allow only from router itself
iptables -I FORWARD -p tcp --dport 53 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p udp --dport 53 ! -s 127.0.0.1 -j REJECT
iptables -I FORWARD -p tcp --dport 853 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p udp --dport 853 ! -s 127.0.0.1 -j REJECT

# Block common DNS-over-HTTPS servers
iptables -I FORWARD -p tcp --dport 443 -d 1.1.1.1 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 1.0.0.1 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 8.8.8.8 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 8.8.4.4 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 9.9.9.9 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 149.112.112.112 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset

# Redirect any DNS queries to router (NAT redirect)
iptables -t nat -I PREROUTING -p tcp --dport 53 ! -d 127.0.0.1 -j REDIRECT --to-port 53
iptables -t nat -I PREROUTING -p udp --dport 53 ! -d 127.0.0.1 -j REDIRECT --to-port 53

# Make firewall rules persistent
# Create custom firewall script
cat > /etc/firewall.user << 'EOF'
#!/bin/sh
# Custom firewall rules to prevent DNS bypass

# Block outbound DNS queries from clients
iptables -I FORWARD -p tcp --dport 53 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p udp --dport 53 ! -s 127.0.0.1 -j REJECT
iptables -I FORWARD -p tcp --dport 853 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p udp --dport 853 ! -s 127.0.0.1 -j REJECT

# Block common DNS-over-HTTPS servers
iptables -I FORWARD -p tcp --dport 443 -d 1.1.1.1 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 1.0.0.1 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 8.8.8.8 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 8.8.4.4 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 9.9.9.9 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset
iptables -I FORWARD -p tcp --dport 443 -d 149.112.112.112 ! -s 127.0.0.1 -j REJECT --reject-with tcp-reset

# Redirect DNS queries to router
iptables -t nat -I PREROUTING -p tcp --dport 53 ! -d 127.0.0.1 -j REDIRECT --to-port 53
iptables -t nat -I PREROUTING -p udp --dport 53 ! -d 127.0.0.1 -j REDIRECT --to-port 53
EOF

chmod +x /etc/firewall.user

# Restart firewall to apply rules
/etc/init.d/firewall restart

# Wait for services to stabilize
sleep 2

echo
echo "=== Testing Configuration ==="

# Test DNS resolution
echo "Testing DNS resolution..."
if nslookup google.com 127.0.0.1 > /dev/null 2>&1; then
    echo "✓ DNS resolution working"
else
    echo "✗ DNS resolution failed"
fi

# Test DNSSEC if dig is available
if command -v dig > /dev/null 2>&1; then
    echo "Testing DNSSEC..."
    if dig +dnssec google.com @127.0.0.1 | grep -q "ad"; then
        echo "✓ DNSSEC validation working"
    else
        echo "✗ DNSSEC validation may not be working"
    fi
fi

# Check unbound status
echo "Checking unbound status..."
if /etc/init.d/unbound status > /dev/null 2>&1; then
    echo "✓ Unbound service is running"
else
    echo "✗ Unbound service is not running"
fi

# Check DHCP status
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    echo "Checking Kea DHCP server status..."
    if /etc/init.d/kea-dhcp4 status > /dev/null 2>&1; then
        echo "✓ Kea DHCP server is running"
    else
        echo "✗ Kea DHCP server is not running"
    fi
else
    echo "Checking dnsmasq DHCP status..."
    if /etc/init.d/dnsmasq status > /dev/null 2>&1; then
        echo "✓ dnsmasq DHCP is running"
    else
        echo "✗ dnsmasq DHCP is not running"
    fi
fi

# Test firewall rules
echo "Testing DNS bypass prevention..."
if iptables -L FORWARD | grep -q "tcp dpt:53"; then
    echo "✓ DNS blocking rules are active"
else
    echo "✗ DNS blocking rules may not be active"
fi

# Test unbound control if available
if command -v unbound-control > /dev/null 2>&1; then
    echo "Unbound statistics:"
    unbound-control stats_noreset 2>/dev/null | head -5 || echo "Unable to get unbound statistics"
fi

echo
echo "=== Installation Complete ==="
echo "Your OpenWrt router now uses:"
echo "- Unbound recursive DNS resolver"
echo "- DNS-over-TLS encryption to $DNS_HOSTNAME"
echo "- DNSSEC validation"
echo "- Local DNS caching"
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    echo "- Kea DHCP server (ISC's modern DHCP)"
else
    echo "- dnsmasq DHCP server"
fi
echo "- Firewall rules preventing DNS bypass"
echo
echo "Configuration files:"
echo "- /etc/unbound/unbound.conf"
echo "- /var/lib/unbound/root.key"
echo "- /etc/unbound/root.hints"
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    echo "- /etc/kea/kea-dhcp4.conf"
    echo "- /var/lib/kea/dhcp4.leases"
fi
echo "- /etc/firewall.user (DNS bypass prevention)"
echo
echo "Service management:"
echo "- Unbound: /etc/init.d/unbound [start|stop|restart|status]"
if [ "$INSTALL_DHCP" = "y" ] || [ "$INSTALL_DHCP" = "Y" ]; then
    echo "- DHCP: /etc/init.d/kea-dhcp4 [start|stop|restart|status]"
else
    echo "- DHCP: /etc/init.d/dnsmasq [start|stop|restart|status]"
fi
echo "- Firewall: /etc/init.d/firewall [start|stop|restart]"
echo "- View logs: logread | grep unbound"
echo

if command -v unbound-control > /dev/null 2>&1; then
    echo "Available unbound-control commands:"
    echo "- unbound-control status"
    echo "- unbound-control stats"
    echo "- unbound-control flush_zone ."
fi

echo
echo "IMPORTANT SECURITY NOTES:"
echo "- All client DNS queries are now forced through your router"
echo "- Clients cannot bypass DNS filtering by using external DNS servers"
echo "- DNS-over-HTTPS to major providers is blocked"
echo "- Direct DNS queries (port 53 and 853) are blocked and redirected"
echo "- All DNS traffic is encrypted between router and upstream servers"
echo
echo "Setup complete! Your DNS is now secure and cannot be bypassed by clients."
